// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExchangeUtils.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SNMP")]
    public partial class SNMPFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "SNMP.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SNMP", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwEx2ex.Snmp_v2_NetSw28_TimeStamp")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicTimeStamp")]
        [NUnit.Framework.CategoryAttribute("StoryGwEx2ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwEx2ex")]
        [NUnit.Framework.CategoryAttribute("suiteTimeStamp")]
        public void GwEx2Ex_Snmp_V2_NetSw28_TimeStamp()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicTimeStamp",
                    "StoryGwEx2ex",
                    "parentSuite2_ExchUtils_GwEx2ex",
                    "suiteTimeStamp"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwEx2ex.Snmp_v2_NetSw28_TimeStamp", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.Given("Архив \'ArcWork\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.Given("Связь с 1 устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.Given("Архив \'ArcReciv\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Given("Связь с 2 устройством \'GwEx2_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
    testRunner.When("Чтение исходных архивных данных \'UpTime\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("Сравнение архивных данных \'SnmpV2_UpTime\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.When("Чтение исходных архивных данных \'Channel 09\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_09\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
    testRunner.When("Чтение исходных архивных данных \'Channel 09\\OutOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then("Сравнение архивных данных \'SnmpV2_OutOctets_09\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.When("Чтение исходных архивных данных \'Channel 10\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_10\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.When("Чтение исходных архивных данных \'Channel 10\\OutOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
    testRunner.Then("Сравнение архивных данных \'SnmpV2_OutOctets_10\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwEx2ex.Snmp_v2_NetSw28_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryGwEx2ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwEx2ex")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void GwEx2Ex_Snmp_V2_NetSw28_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryGwEx2ex",
                    "parentSuite2_ExchUtils_GwEx2ex",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwEx2ex.Snmp_v2_NetSw28_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.Given("Связь с устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.Given("Связь с устройством \'GwEx2_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_UpTime\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwEx1ex.Snmp_v2_NetSw28_TimeStamp")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicTimeStamp")]
        [NUnit.Framework.CategoryAttribute("StoryGwEx1ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwEx1ex")]
        [NUnit.Framework.CategoryAttribute("suiteTimeStamp")]
        public void GwEx1Ex_Snmp_V2_NetSw28_TimeStamp()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicTimeStamp",
                    "StoryGwEx1ex",
                    "parentSuite2_ExchUtils_GwEx1ex",
                    "suiteTimeStamp"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwEx1ex.Snmp_v2_NetSw28_TimeStamp", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
    testRunner.Given("Архив \'ArcWork\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.Given("Связь с 1 устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
    testRunner.Given("Архив \'ArcReciv\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
 testRunner.Given("Связь с 2 устройством \'GwEx_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
 testRunner.When("Чтение исходных архивных данных \'UpTime\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then("Сравнение архивных данных \'SnmpV2_UpTime\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
    testRunner.When("Чтение исходных архивных данных \'Channel 09\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_09\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
    testRunner.When("Чтение исходных архивных данных \'Channel 10\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_10\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwEx1ex.Snmp_v2_NetSw28_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryGwEx1ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwEx1ex")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void GwEx1Ex_Snmp_V2_NetSw28_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryGwEx1ex",
                    "parentSuite2_ExchUtils_GwEx1ex",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwEx1ex.Snmp_v2_NetSw28_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 70
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.Given("Связь с устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.Given("Связь с устройством \'GwEx_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_UpTime\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MbTcpSlave.Snmp_v2_NetSw28_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryModbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_Modbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void MbTcpSlave_Snmp_V2_NetSw28_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryModbus_TCP_Slave",
                    "parentSuite2_ExchUtils_Modbus_TCP_Slave",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MbTcpSlave.Snmp_v2_NetSw28_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
 testRunner.Given("Связь с устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
 testRunner.Given("Связь с устройством \'ModbusTcp_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_UpTime\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Slave104.Snmp_v2_NetSw28_TimeStamp")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicTimeStamp")]
        [NUnit.Framework.CategoryAttribute("Storyiec104_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_iec104_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteTimeStamp")]
        public void Slave104_Snmp_V2_NetSw28_TimeStamp()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicTimeStamp",
                    "Storyiec104_Slave",
                    "parentSuite2_ExchUtils_iec104_Slave",
                    "suiteTimeStamp"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Slave104.Snmp_v2_NetSw28_TimeStamp", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 107
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
    testRunner.Given("Архив \'ArcWork\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
 testRunner.Given("Связь с 1 устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
    testRunner.Given("Архив \'ArcReciv\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.Given("Связь с 2 устройством \'Iec104_Sp\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
 testRunner.When("Чтение исходных архивных данных \'UpTime\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
    testRunner.Then("Сравнение архивных данных \'SnmpV2_UpTime\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
    testRunner.When("Чтение исходных архивных данных \'Channel 09\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_09\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.When("Чтение исходных архивных данных \'Channel 10\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_10\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Slave104.Snmp_v2_NetSw28_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("Storyiec104_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_iec104_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void Slave104_Snmp_V2_NetSw28_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "Storyiec104_Slave",
                    "parentSuite2_ExchUtils_iec104_Slave",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Slave104.Snmp_v2_NetSw28_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 129
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
 testRunner.Given("Связь с устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 132
 testRunner.Given("Связь с устройством \'Iec104_Sp\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_UpTime\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwEx1Proxy.Snmp_v2_NetSw28_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryGwEx1Proxy")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwEx1Proxy")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void GwEx1Proxy_Snmp_V2_NetSw28_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryGwEx1Proxy",
                    "parentSuite2_ExchUtils_GwEx1Proxy",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwEx1Proxy.Snmp_v2_NetSw28_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 148
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 149
 testRunner.Given("Связь с устройством \'VerProxyGwEx25_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_UpTime\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 151
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwEx2Proxy.Snmp_v2_NetSw28_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryGwEx2Proxy")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwEx2Proxy")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void GwEx2Proxy_Snmp_V2_NetSw28_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryGwEx2Proxy",
                    "parentSuite2_ExchUtils_GwEx2Proxy",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwEx2Proxy.Snmp_v2_NetSw28_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 164
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 165
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 166
 testRunner.Given("Связь с устройством \'VerProxy2GwEx25_2\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_UpTime\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("OpcUAServer.Snmp_v2_NetSw28_TimeStamp")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicTimeStamp")]
        [NUnit.Framework.CategoryAttribute("StoryOpcUAServer")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_OpcUAServer")]
        [NUnit.Framework.CategoryAttribute("suiteTimeStamp")]
        public void OpcUAServer_Snmp_V2_NetSw28_TimeStamp()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicTimeStamp",
                    "StoryOpcUAServer",
                    "parentSuite2_ExchUtils_OpcUAServer",
                    "suiteTimeStamp"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OpcUAServer.Snmp_v2_NetSw28_TimeStamp", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 181
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 182
    testRunner.Given("Архив \'ArcWork\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 183
 testRunner.Given("Связь с 1 устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 184
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
    testRunner.Given("Архив \'ArcReciv\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 186
 testRunner.Given("Связь с 2 устройством \'OPC_UA_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 187
 testRunner.When("Чтение исходных архивных данных \'UpTime\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 188
    testRunner.Then("Сравнение архивных данных \'SnmpV2_UpTime\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
    testRunner.When("Чтение исходных архивных данных \'Channel 09\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_09\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
    testRunner.When("Чтение исходных архивных данных \'Channel 10\\InOctets\'.\'\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
    testRunner.Then("Сравнение архивных данных \'SnmpV2_InOctets_10\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("OpcUAServer.Snmp_v2_NetSw28_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryOpcUAServer")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_OpcUAServer")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void OpcUAServer_Snmp_V2_NetSw28_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryOpcUAServer",
                    "parentSuite2_ExchUtils_OpcUAServer",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OpcUAServer.Snmp_v2_NetSw28_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 202
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 203
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 204
 testRunner.Given("Связь с устройством \'Snmp_v2_NetSw28\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 205
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 206
 testRunner.Given("Связь с устройством \'OPC_UA_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 207
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_UpTime\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_09\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_Speed_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 213
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_InOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 214
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OutOctets_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 215
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'SnmpV2_OpStat_10\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

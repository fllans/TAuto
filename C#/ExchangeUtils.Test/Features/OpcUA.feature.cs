// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExchangeUtils.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OpcUA")]
    [NUnit.Framework.IgnoreAttribute("Ignored feature")]
    public partial class OpcUAFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "ignore"};
        
#line 1 "OpcUA.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "OpcUA", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwE2ex.OpcUa_TimeStamp")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicTimeStamp")]
        [NUnit.Framework.CategoryAttribute("StoryGwE2ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwE2ex")]
        [NUnit.Framework.CategoryAttribute("suiteTimeStamp")]
        public void GwE2Ex_OpcUa_TimeStamp()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicTimeStamp",
                    "StoryGwE2ex",
                    "parentSuite2_ExchUtils_GwE2ex",
                    "suiteTimeStamp"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwE2ex.OpcUa_TimeStamp", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.Given("Архив \'ArcWork\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Given("Связь с 1 устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
    testRunner.Given("Архив \'ArcReciv\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.Given("Связь с 2 устройством \'GwEx2ex_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_bool\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_BOOL\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_byte\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_BYTE\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_word\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_WORD\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_dword\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_DWORD\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_lword\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_LWORD\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_sint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_SINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_int\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_INT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_dint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_DINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_lint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_LINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_usint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_USINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_uint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_UINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_udint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_UDINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_ulint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_ULINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_real\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_REAL\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_lreal\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_LREAL\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_time\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_TIME\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_DT\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_DT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwE2ex.OpcUA_Params_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryGwE2ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwE2ex")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void GwE2Ex_OpcUA_Params_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryGwE2ex",
                    "parentSuite2_ExchUtils_GwE2ex",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwE2ex.OpcUA_Params_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
 testRunner.Given("Связь с устройством \'GwEx2ex_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_BOOL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_BYTE_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_WORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_DWORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LWORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_SINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_INT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_DINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_USINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_UINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_UDINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_ULINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_REAL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LREAL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_TIME_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_DT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwE2ex.OpcUA_Params_ReadWrite")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("StoryGwE2ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwE2ex")]
        [NUnit.Framework.CategoryAttribute("suiteЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("subSuiteРазрешенные_переменные")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void GwE2Ex_OpcUA_Params_ReadWrite()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicЧтение_Запись",
                    "StoryGwE2ex",
                    "parentSuite2_ExchUtils_GwE2ex",
                    "suiteЧтение_Запись",
                    "subSuiteРазрешенные_переменные",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwE2ex.OpcUA_Params_ReadWrite", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.Given("Связь с устройством \'GwEx2ex_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
 testRunner.Then("Проверка чтения и записи значений \'TRUE; FALSE\' в \'OpcUa_PARAM_BOOL_external\'.\'Зн" +
                        "ачение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.Then("Проверка чтения и записи значений \'BYTE AnyValues\' в \'OpcUa_PARAM_BYTE_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
 testRunner.Then("Проверка чтения и записи значений \'WORD AnyValues\' в \'OpcUa_PARAM_WORD_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.Then("Проверка чтения и записи значений \'DWORD AnyValues\' в \'OpcUa_PARAM_DWORD_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then("Проверка чтения и записи значений \'LWORD AnyValues\' в \'OpcUa_PARAM_LWORD_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("Проверка чтения и записи значений \'SINT AnyValues\' в \'OpcUa_PARAM_SINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.Then("Проверка чтения и записи значений \'INT AnyValues\' в \'OpcUa_PARAM_INT_external\'.\'З" +
                        "начение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Then("Проверка чтения и записи значений \'DINT AnyValues\' в \'OpcUa_PARAM_DINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.Then("Проверка чтения и записи значений \'LINT AnyValues\' в \'OpcUa_PARAM_LINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.Then("Проверка чтения и записи значений \'USINT AnyValues\' в \'OpcUa_PARAM_USINT_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.Then("Проверка чтения и записи значений \'UINT AnyValues\' в \'OpcUa_PARAM_UINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.Then("Проверка чтения и записи значений \'UDINT AnyValues\' в \'OpcUa_PARAM_UDINT_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.Then("Проверка чтения и записи значений \'ULINT AnyValues\' в \'OpcUa_PARAM_ULINT_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.Then("Проверка чтения и записи значений \'REAL AnyValues\' в \'OpcUa_PARAM_REAL_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.Then("Проверка чтения и записи значений \'LREAL AnyValues\' в \'OpcUa_PARAM_LREAL_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.Then("Проверка чтения и записи значений \'TIME AnyValues\' в \'OpcUa_PARAM_TIME_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.Then("Проверка чтения и записи значений \'DT AnyValues\' в \'OpcUa_PARAM_DT_external\'.\'Зна" +
                        "чение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GwE2ex.OpcUA_Params_WiteList")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("StoryGwE2ex")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_GwE2ex")]
        [NUnit.Framework.CategoryAttribute("suiteЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("subSuiteЗапись_запрещена")]
        public void GwE2Ex_OpcUA_Params_WiteList()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicЧтение_Запись",
                    "StoryGwE2ex",
                    "parentSuite2_ExchUtils_GwE2ex",
                    "suiteЧтение_Запись",
                    "subSuiteЗапись_запрещена"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GwE2ex.OpcUA_Params_WiteList", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 111
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
 testRunner.Given("Связь с устройством \'GwEx2ex_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
 testRunner.Then("Проверка записи \'OpcUa_PARAM_BOOL_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.Then("Проверка записи \'OpcUa_PARAM_BYTE_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.Then("Проверка записи \'OpcUa_PARAM_WORD_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.Then("Проверка записи \'OpcUa_PARAM_DWORD_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
 testRunner.Then("Проверка записи \'OpcUa_PARAM_LWORD_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.Then("Проверка записи \'OpcUa_PARAM_SINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
 testRunner.Then("Проверка записи \'OpcUa_PARAM_INT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
 testRunner.Then("Проверка записи \'OpcUa_PARAM_DINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.Then("Проверка записи \'OpcUa_PARAM_LINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
 testRunner.Then("Проверка записи \'OpcUa_PARAM_USINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
 testRunner.Then("Проверка записи \'OpcUa_PARAM_UINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.Then("Проверка записи \'OpcUa_PARAM_UDINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.Then("Проверка записи \'OpcUa_PARAM_ULINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.Then("Проверка записи \'OpcUa_PARAM_REAL_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
 testRunner.Then("Проверка записи \'OpcUa_PARAM_LREAL_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.Then("Проверка записи \'OpcUa_PARAM_TIME_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.Then("Проверка записи \'OpcUa_PARAM_DT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Slave104.OpcUa_TimeStamp")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicTimeStamp")]
        [NUnit.Framework.CategoryAttribute("Storyiec104_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_iec104_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteTimeStamp")]
        public void Slave104_OpcUa_TimeStamp()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicTimeStamp",
                    "Storyiec104_Slave",
                    "parentSuite2_ExchUtils_iec104_Slave",
                    "suiteTimeStamp"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Slave104.OpcUa_TimeStamp", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 137
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 138
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
    testRunner.Given("Архив \'ArcWork\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
 testRunner.Given("Связь с 1 устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 142
    testRunner.Given("Архив \'ArcReciv\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
 testRunner.Given("Связь с 2 устройством \'Iec104_Sp\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
 testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_bool\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_BOOL\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_byte\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_BYTE\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_word\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_WORD\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_dword\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_DWORD\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_lword\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_LWORD\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_sint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_SINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_int\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_INT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_dint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 159
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_DINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_lint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_LINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_usint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 163
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_USINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 164
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_uint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_UINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_udint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 167
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_UDINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_ulint\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_ULINT\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_real\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_REAL\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_lreal\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_LREAL\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
    testRunner.When("Чтение исходных архивных данных \'OpcUa_PARAM_time\'.\'Значение\' из \'ArcWork\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
    testRunner.Then("Сравнение архивных данных \'OpcUa_PARAM_TIME\'.\'Значение\' из \'ArcReciv\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Slave104.OpcUA_Params_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("Storyiec104_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_iec104_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void Slave104_OpcUA_Params_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "Storyiec104_Slave",
                    "parentSuite2_ExchUtils_iec104_Slave",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Slave104.OpcUA_Params_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 183
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 184
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 186
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 187
 testRunner.Given("Связь с устройством \'Iec104_Sp\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_BOOL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_BYTE_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_WORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_DWORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 192
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LWORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_SINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 194
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_INT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 195
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_DINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 196
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_USINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_UINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_UDINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 200
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_ULINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 201
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_REAL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 202
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LREAL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_TIME_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Slave104.OpcUA_Params_ReadWrite")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("Storyiec104_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_iec104_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("subSuiteРазрешенные_переменные")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void Slave104_OpcUA_Params_ReadWrite()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicЧтение_Запись",
                    "Storyiec104_Slave",
                    "parentSuite2_ExchUtils_iec104_Slave",
                    "suiteЧтение_Запись",
                    "subSuiteРазрешенные_переменные",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Slave104.OpcUA_Params_ReadWrite", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 211
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 213
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 214
 testRunner.Given("Связь с устройством \'Iec104_Sp\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
 testRunner.Then("Проверка запись значений \'1; FALSE\' в \'OpcUa_PARAM_BOOL_ext_wr\'.\'Значение\' Чтение" +
                        " из \'OpcUa_PARAM_BOOL_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
 testRunner.Then("Проверка запись значений \'BYTE AnyValues\' в \'OpcUa_PARAM_BYTE_ext_wr\'.\'Значение\' " +
                        "Чтение из \'OpcUa_PARAM_BYTE_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.Then("Проверка запись значений \'1; 0x7F00; 0x7FFF\' в \'OpcUa_PARAM_WORD_ext_wr\'.\'Значени" +
                        "е\' Чтение из \'OpcUa_PARAM_WORD_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 218
 testRunner.Then("Проверка запись значений \'FLOAT Like UINT\' в \'OpcUa_PARAM_DWORD_ext_wr\'.\'Значение" +
                        "\' Чтение из \'OpcUa_PARAM_DWORD_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 220
 testRunner.Then("Проверка запись значений \'SINT AnyValues\' в \'OpcUa_PARAM_SINT_ext_wr\'.\'Значение\' " +
                        "Чтение из \'OpcUa_PARAM_SINT_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 221
 testRunner.Then("Проверка запись значений \'INT AnyValues\' в \'OpcUa_PARAM_INT_ext_wr\'.\'Значение\' Чт" +
                        "ение из \'OpcUa_PARAM_INT_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
 testRunner.Then("Проверка запись значений \'FLOAT Like INT\' в \'OpcUa_PARAM_DINT_ext_wr\'.\'Значение\' " +
                        "Чтение из \'OpcUa_PARAM_DINT_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 224
 testRunner.Then("Проверка запись значений \'USINT AnyValues\' в \'OpcUa_PARAM_USINT_ext_wr\'.\'Значение" +
                        "\' Чтение из \'OpcUa_PARAM_USINT_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 225
 testRunner.Then("Проверка запись значений \'UINT AnyValues\' в \'OpcUa_PARAM_UINT_ext_wr\'.\'Значение\' " +
                        "Чтение из \'OpcUa_PARAM_UINT_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 226
 testRunner.Then("Проверка запись значений \'FLOAT Like UINT\' в \'OpcUa_PARAM_UDINT_ext_wr\'.\'Значение" +
                        "\' Чтение из \'OpcUa_PARAM_UDINT_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 228
 testRunner.Then("Проверка запись значений \'REAL AnyValues\' в \'OpcUa_PARAM_REAL_ext_wr\'.\'Значение\' " +
                        "Чтение из \'OpcUa_PARAM_REAL_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 229
 testRunner.Then("Проверка запись значений \'REAL AnyValues\' в \'OpcUa_PARAM_LREAL_ext_wr\'.\'Значение\'" +
                        " Чтение из \'OpcUa_PARAM_LREAL_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 230
 testRunner.Then("Проверка запись значений \'FLOAT Like UINT\' в \'OpcUa_PARAM_TIME_ext_wr\'.\'Значение\'" +
                        " Чтение из \'OpcUa_PARAM_TIME_external\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MbTcpSlave.OpcUA_Params_GoodQual")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("StoryModbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_Modbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteПроверка_Quality")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void MbTcpSlave_OpcUA_Params_GoodQual()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicПроверка_Quality",
                    "StoryModbus_TCP_Slave",
                    "parentSuite2_ExchUtils_Modbus_TCP_Slave",
                    "suiteПроверка_Quality",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MbTcpSlave.OpcUA_Params_GoodQual", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 237
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 238
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 239
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 240
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 241
 testRunner.Given("Связь с устройством \'ModbusTcp_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 242
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_BOOL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_BYTE_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_WORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 245
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_DWORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 246
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LWORD_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 247
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_SINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 248
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_INT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 249
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_DINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 250
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 251
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_USINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
 testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_UINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 253
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_UDINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 254
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_ULINT_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 255
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_REAL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_LREAL_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 257
    testRunner.Then("Проверка Runtime качества \'Good\' переменной \'OpcUa_PARAM_TIME_const\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MbTcpSlave.OpcUA_Params_ReadWrite")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("StoryModbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_Modbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("subSuiteРазрешенные_переменные")]
        [NUnit.Framework.CategoryAttribute("critical")]
        public void MbTcpSlave_OpcUA_Params_ReadWrite()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicЧтение_Запись",
                    "StoryModbus_TCP_Slave",
                    "parentSuite2_ExchUtils_Modbus_TCP_Slave",
                    "suiteЧтение_Запись",
                    "subSuiteРазрешенные_переменные",
                    "critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MbTcpSlave.OpcUA_Params_ReadWrite", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 264
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 265
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 266
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 267
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 268
 testRunner.Given("Связь с устройством \'ModbusTcp_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 269
 testRunner.Then("Проверка чтения и записи значений \'BOOL Values\' в \'OpcUa_PARAM_BOOL_external\'.\'Зн" +
                        "ачение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 270
 testRunner.Then("Проверка чтения и записи значений \'BYTE AnyValues\' в \'OpcUa_PARAM_BYTE_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
 testRunner.Then("Проверка чтения и записи значений \'WORD AnyValues\' в \'OpcUa_PARAM_WORD_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 272
 testRunner.Then("Проверка чтения и записи значений \'DWORD AnyValues\' в \'OpcUa_PARAM_DWORD_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 273
 testRunner.Then("Проверка чтения и записи значений \'LWORD AnyValues\' в \'OpcUa_PARAM_LWORD_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 274
 testRunner.Then("Проверка чтения и записи значений \'SINT AnyValues\' в \'OpcUa_PARAM_SINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
 testRunner.Then("Проверка чтения и записи значений \'INT AnyValues\' в \'OpcUa_PARAM_INT_external\'.\'З" +
                        "начение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 276
 testRunner.Then("Проверка чтения и записи значений \'DINT AnyValues\' в \'OpcUa_PARAM_DINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 277
 testRunner.Then("Проверка чтения и записи значений \'DINT AnyValues\' в \'OpcUa_PARAM_LINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 278
 testRunner.Then("Проверка чтения и записи значений \'USINT AnyValues\' в \'OpcUa_PARAM_USINT_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
 testRunner.Then("Проверка чтения и записи значений \'UINT AnyValues\' в \'OpcUa_PARAM_UINT_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.Then("Проверка чтения и записи значений \'UDINT AnyValues\' в \'OpcUa_PARAM_UDINT_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 281
 testRunner.Then("Проверка чтения и записи значений \'UDINT AnyValues\' в \'OpcUa_PARAM_ULINT_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 282
 testRunner.Then("Проверка чтения и записи значений \'REAL AnyValues\' в \'OpcUa_PARAM_REAL_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 283
 testRunner.Then("Проверка чтения и записи значений \'LREAL AnyValues\' в \'OpcUa_PARAM_LREAL_external" +
                        "\'.\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 284
 testRunner.Then("Проверка чтения и записи значений \'TIME AnyValues\' в \'OpcUa_PARAM_TIME_external\'." +
                        "\'Значение\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MbTcpSlave.OpcUA_Params_WiteList")]
        [NUnit.Framework.CategoryAttribute("fromMirror")]
        [NUnit.Framework.CategoryAttribute("fromGate")]
        [NUnit.Framework.CategoryAttribute("EpicЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("StoryModbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("parentSuite2_ExchUtils_Modbus_TCP_Slave")]
        [NUnit.Framework.CategoryAttribute("suiteЧтение_Запись")]
        [NUnit.Framework.CategoryAttribute("subSuiteЗапись_запрещена")]
        public void MbTcpSlave_OpcUA_Params_WiteList()
        {
            string[] tagsOfScenario = new string[] {
                    "fromMirror",
                    "fromGate",
                    "EpicЧтение_Запись",
                    "StoryModbus_TCP_Slave",
                    "parentSuite2_ExchUtils_Modbus_TCP_Slave",
                    "suiteЧтение_Запись",
                    "subSuiteЗапись_запрещена"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MbTcpSlave.OpcUA_Params_WiteList", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 290
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 291
 testRunner.Given("Шлюзы \'work\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 292
 testRunner.Given("Связь с устройством \'OpcUa_ASt5000_Lin\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 293
    testRunner.Given("Шлюз \'DataReceiver\' в работе", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 294
 testRunner.Given("Связь с устройством \'ModbusTcp_1\' в норме", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 295
 testRunner.Then("Проверка записи \'OpcUa_PARAM_BOOL_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 296
 testRunner.Then("Проверка записи \'OpcUa_PARAM_BYTE_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 297
 testRunner.Then("Проверка записи \'OpcUa_PARAM_WORD_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 298
 testRunner.Then("Проверка записи \'OpcUa_PARAM_DWORD_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 299
 testRunner.Then("Проверка записи \'OpcUa_PARAM_LWORD_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 300
 testRunner.Then("Проверка записи \'OpcUa_PARAM_SINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 301
 testRunner.Then("Проверка записи \'OpcUa_PARAM_INT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 302
 testRunner.Then("Проверка записи \'OpcUa_PARAM_DINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 303
 testRunner.Then("Проверка записи \'OpcUa_PARAM_LINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 304
 testRunner.Then("Проверка записи \'OpcUa_PARAM_USINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 305
 testRunner.Then("Проверка записи \'OpcUa_PARAM_UINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 306
 testRunner.Then("Проверка записи \'OpcUa_PARAM_UDINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 307
 testRunner.Then("Проверка записи \'OpcUa_PARAM_ULINT_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
 testRunner.Then("Проверка записи \'OpcUa_PARAM_REAL_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 309
 testRunner.Then("Проверка записи \'OpcUa_PARAM_LREAL_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 310
 testRunner.Then("Проверка записи \'OpcUa_PARAM_TIME_wr\'.\'Значение\' не в белом списке", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
